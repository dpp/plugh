source: twitter


/* Hi Dude */
add-sentiment(tweet) = tweet.text >> calc-sentiment >> (tweet.sentiment := )


with-sentiment = xform(add-sentiment, twitter)


filtered-sentiment =
  filter( x => sent = x.sentiment
               ((sent.pos > 2) ||
                (sent.neg < -2)),
          with-sentiment)

average-sentiment = flow( (c, t) => c :>= {.pos-sum -> ( + t.sentiment.pos),
                                           .neg-sum -> ( + t.sentiment.neg),
                                           .pos-cnt -> inc,
                                           .neg-cnt -> inc} ,
                           {.pos-sum -> 0, .neg-sum -> 0,
                            .pos-cnt -> 0, .neg-cnt -> 0} , filtered-sentiment)



groups = group-by(twitter, ( >> .date >> date-to-int >> ( / 10:minutes )) )


sink: buckets = groups

sink: averages = average-sentiment


/*
mr-yak(x) = x + 1

joiner(x) = str("Hello, ", x)

pluser(x,y) = (x + y)

dude(x) = ( + x)

frog(x) = x >> .text

moose(q) = z = q * 2
           meow(n) = z * n
           meow(q)

/* Hi Dude */
add-sentiment(tweet) = tweet.text >> calc-sentiment >> (tweet.sentiment := )

// compiled

(defn mr-yak [x] (+ x 1))

(defn joiner [x] (str Hello,  x))

(defn pluser [x y] (+ x y))

(defn dude [x] (fn [G1777766422924770Z34336387754] (+ G1777766422924770Z34336387754 x)))

(defn frog [x] (>> x :text))

(defn moose [q] (let [z (* q 2)] (letfn [(meow [n] (* z n))] (meow q))))

(defn add-sentiment [tweet] (>> (tweet :text) (>> calc-sentiment (fn [G1777766422924771Z3252053202] (:= (tweet :sentiment) G1777766422924771Z3252053202)))))

*/